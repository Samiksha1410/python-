# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1huz4I-GUxo879G5YycMoQy0vtCfHyZy6
"""

pip install scapy

import scapy.all as scapy
import socket
import threading
from queue import Queue
import ipaddress

# Thread-safe queue for storing scan results
result_queue = Queue()

# Scan a single IP using ARP and resolve hostname
def scan(ip, result_queue):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = broadcast / arp_request

    answered = scapy.srp(packet, timeout=1, verbose=False)[0]
    for sent, received in answered:
        mac = received.hwsrc
        try:
            hostname = socket.gethostbyaddr(received.psrc)[0]
        except socket.herror:
            hostname = "Unknown"
        result_queue.put((received.psrc, mac, hostname))

# Display results in a table format
def print_results(queue):
    print(f"\n{'IP Address':<20}{'MAC Address':<20}{'Hostname'}")
    print("-" * 60)
    while not queue.empty():
        ip, mac, hostname = queue.get()
        print(f"{ip:<20}{mac:<20}{hostname}")

# Main function to manage scanning
def main():
    cidr = input("Enter CIDR (e.g., 192.168.1.0/24): ").strip()
    try:
        network = ipaddress.ip_network(cidr, strict=False)
    except ValueError:
        print("Invalid CIDR format.")
        return

    threads = []
    for ip in network.hosts():
        t = threading.Thread(target=scan, args=(str(ip), result_queue))
        t.start()
        threads.append(t)

    for t in threads:
        t.join()

    print_results(result_queue)

# Entry point
if __name__ == "__main__":
    main()

